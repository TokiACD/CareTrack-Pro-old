generator client {
  provider = "prisma-client-js"
  // Enable query optimization
  previewFeatures = ["views", "metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id                  String               @id @default(cuid())
  email               String               @unique @db.VarChar(255)
  name                String               @db.VarChar(255)
  passwordHash        String               @map("password_hash") @db.VarChar(255)
  isActive            Boolean              @default(true) @map("is_active")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  deletedAt           DateTime?            @map("deleted_at")
  invitedBy           String?              @map("invited_by")
  lastLogin           DateTime?            @map("last_login")
  // Healthcare compliance fields
  dataRetentionDate   DateTime?            @map("data_retention_date")
  encryptedPII        String?              @map("encrypted_pii") @db.Text
  complianceFlags     Json?                @map("compliance_flags")
  invitedByAdmin      AdminUser?           @relation("AdminInvites", fields: [invitedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invitedAdmins       AdminUser[]          @relation("AdminInvites")
  assessmentResponses AssessmentResponse[]
  draftResponses      DraftAssessmentResponse[]
  auditLogs           AuditLog[]
  competencyRatings   CompetencyRating[]
  sentInvitations     Invitation[]
  rotaEntries         RotaEntry[]
  shifts              Shift[]

  @@index([deletedAt])                     // Soft delete filtering
  @@index([isActive])                      // Active user queries
  @@index([email])                         // Email lookup (already unique, but for partial matches)
  @@index([lastLogin])                     // Login activity tracking
  @@index([createdAt])                     // User registration queries
  @@index([dataRetentionDate])             // HIPAA retention compliance
  @@index([id, isActive, deletedAt])       // Compound index for fast auth lookup optimization
  @@index([isActive, deletedAt])           // Compound index for active admin filtering
  @@map("admin_users")
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  email     String    @db.VarChar(255)
  token     String    @unique @db.VarChar(255)
  expiresAt DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  usedAt    DateTime? @map("used_at")
  ipAddress String?   @map("ip_address") @db.VarChar(45)
  userAgent String?   @map("user_agent") @db.Text

  @@index([email, expiresAt])              // Email-based token lookup
  @@index([token, expiresAt])              // Token validation queries
  @@index([createdAt])                     // Temporal token queries
  @@index([email, usedAt])                 // Prevent token reuse attacks
  @@map("password_reset_tokens")
}

model Invitation {
  id             String           @id @default(cuid())
  email          String           @unique
  userType       InvitationType   @map("user_type")
  token          String           @unique
  name           String?
  invitedBy      String           @map("invited_by")
  invitedAt      DateTime         @default(now()) @map("invited_at")
  expiresAt      DateTime         @map("expires_at")
  acceptedAt     DateTime?        @map("accepted_at")
  declinedAt     DateTime?        @map("declined_at")
  status         InvitationStatus @default(PENDING)
  invitedByAdmin AdminUser        @relation(fields: [invitedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("invitations")
}

model EmailChangeRequest {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  userType    String    @map("user_type")
  oldEmail    String    @map("old_email")
  newEmail    String    @map("new_email")
  token       String    @unique
  status      String    @default("PENDING")
  requestedAt DateTime  @default(now()) @map("requested_at")
  expiresAt   DateTime  @map("expires_at")
  verifiedAt  DateTime? @map("verified_at")
  cancelledAt DateTime? @map("cancelled_at")

  @@map("email_change_requests")
}

model Carer {
  id                  String                   @id @default(cuid())
  email               String                   @unique @db.VarChar(255)
  name                String                   @db.VarChar(255)
  passwordHash        String?                  @map("password_hash") @db.VarChar(255)
  isActive            Boolean                  @default(true) @map("is_active")
  createdAt           DateTime                 @default(now()) @map("created_at")
  updatedAt           DateTime                 @updatedAt @map("updated_at")
  deletedAt           DateTime?                @map("deleted_at")
  // Healthcare compliance fields
  dataRetentionDate   DateTime?                @map("data_retention_date")
  encryptedPII        String?                  @map("encrypted_pii") @db.Text
  complianceFlags     Json?                    @map("compliance_flags")
  lastActiveDate      DateTime?                @map("last_active_date")
  lastLogin           DateTime?                @map("last_login")
  emergencyContactInfo Json?                   @map("emergency_contact_info")
  assessmentResponses AssessmentResponse[]
  draftResponses      DraftAssessmentResponse[]
  packageAssignments  CarerPackageAssignment[]
  competencyRatings   CompetencyRating[]
  rotaEntries         RotaEntry[]
  shiftApplications   ShiftApplication[]
  shiftAssignments    ShiftAssignment[]
  selectedShifts      Shift[]              @relation("SelectedCarer")
  taskProgress        TaskProgress[]

  @@index([deletedAt])                     // Soft delete filtering
  @@index([isActive])                      // Active carer queries
  @@index([email])                         // Email lookup
  @@index([lastActiveDate])                // Activity tracking
  @@index([lastLogin])                     // Login activity tracking
  @@index([dataRetentionDate])             // HIPAA retention compliance
  @@index([isActive, deletedAt])           // Compound index for active carer filtering
  // @@fulltext([name, email])                // Full-text search on name and email (requires MySQL)
  @@map("carers")
}

model CarePackage {
  id               String                   @id @default(cuid())
  name             String                   @db.VarChar(255)
  postcode         String                   @db.VarChar(20)
  isActive         Boolean                  @default(true) @map("is_active")
  createdAt        DateTime                 @default(now()) @map("created_at")
  updatedAt        DateTime                 @updatedAt @map("updated_at")
  deletedAt        DateTime?                @map("deleted_at")
  // Healthcare specific fields
  clientInfo       Json?                    @map("client_info")
  careLevel        String?                  @map("care_level") @db.VarChar(50)
  priority         Int?                     @default(1)
  dataRetentionDate DateTime?               @map("data_retention_date")
  carerAssignments CarerPackageAssignment[]
  taskAssignments  PackageTaskAssignment[]
  rotaEntries      RotaEntry[]
  shifts           Shift[]
  taskProgress     TaskProgress[]

  @@index([deletedAt])                     // Soft delete filtering
  @@index([isActive])                      // Active package queries
  @@index([postcode])                      // Postcode-based queries
  @@index([careLevel])                     // Care level filtering
  @@index([priority])                      // Priority-based queries
  @@index([dataRetentionDate])             // HIPAA retention compliance
  @@index([isActive, deletedAt])           // Compound index for active package filtering
  @@index([postcode, isActive])            // Location-based active packages
  // @@fulltext([name])                       // Full-text search on package name (requires MySQL)
  @@map("care_packages")
}

model Task {
  id                     String                   @id @default(cuid())
  name                   String                   @db.VarChar(255)
  description            String?                  @db.Text
  targetCount            Int                      @map("target_count")
  isActive               Boolean                  @default(true) @map("is_active")
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @updatedAt @map("updated_at")
  deletedAt              DateTime?                @map("deleted_at")
  // Healthcare specific fields
  taskCategory           String?                  @map("task_category") @db.VarChar(100)
  difficulty             Int?                     @default(1)
  estimatedDuration      Int?                     @map("estimated_duration")
  requiredCertifications Json?                    @map("required_certifications")
  assessmentTaskCoverage AssessmentTaskCoverage[]
  competencyRatings      CompetencyRating[]
  packageAssignments     PackageTaskAssignment[]
  taskProgress           TaskProgress[]

  @@index([deletedAt])                     // Soft delete filtering
  @@index([isActive])                      // Active task queries
  @@index([targetCount])                   // Target count filtering
  @@index([taskCategory])                  // Category-based queries
  @@index([difficulty])                    // Difficulty filtering
  @@index([isActive, deletedAt])           // Compound index for active task filtering
  // @@fulltext([name, description])          // Full-text search on task details (requires MySQL)
  @@map("tasks")
}

model CarerPackageAssignment {
  id         String      @id @default(cuid())
  carerId    String      @map("carer_id")
  packageId  String      @map("package_id")
  assignedAt DateTime    @default(now()) @map("assigned_at")
  unassignedAt DateTime? @map("unassigned_at")
  isActive   Boolean     @default(true) @map("is_active")
  assignedBy String?     @map("assigned_by")
  notes      String?     @db.Text
  carer      Carer       @relation(fields: [carerId], references: [id], onDelete: Cascade)
  package    CarePackage @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@unique([carerId, packageId])
  @@index([carerId, isActive])             // Active assignments per carer
  @@index([packageId, isActive])           // Active assignments per package
  @@index([assignedAt])                    // Assignment date queries
  @@index([assignedBy])                    // Assignment tracking
  @@map("carer_package_assignments")
}

model PackageTaskAssignment {
  id         String      @id @default(cuid())
  packageId  String      @map("package_id")
  taskId     String      @map("task_id")
  assignedAt DateTime    @default(now()) @map("assigned_at")
  unassignedAt DateTime? @map("unassigned_at")
  isActive   Boolean     @default(true) @map("is_active")
  assignedBy String?     @map("assigned_by")
  priority   Int?        @default(1)
  notes      String?     @db.Text
  package    CarePackage @relation(fields: [packageId], references: [id], onDelete: Cascade)
  task       Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([packageId, taskId])
  @@index([packageId, isActive])           // Active tasks per package
  @@index([taskId, isActive])              // Package assignments per task
  @@index([priority])                      // Priority-based queries
  @@index([assignedAt])                    // Assignment date queries
  @@map("package_task_assignments")
}

model Assessment {
  id                  String                   @id @default(cuid())
  name                String                   @db.VarChar(255)
  description         String?                  @db.Text
  version             String?                  @db.VarChar(20)
  isActive            Boolean                  @default(true) @map("is_active")
  createdAt           DateTime                 @default(now()) @map("created_at")
  updatedAt           DateTime                 @updatedAt @map("updated_at")
  deletedAt           DateTime?                @map("deleted_at")
  // Healthcare compliance fields
  dataRetentionDate   DateTime?                @map("data_retention_date")
  isArchived          Boolean                  @default(false) @map("is_archived")
  assessmentResponses AssessmentResponse[]
  draftResponses      DraftAssessmentResponse[]
  tasksCovered        AssessmentTaskCoverage[]
  emergencyQuestions  EmergencyQuestion[]
  knowledgeQuestions  KnowledgeQuestion[]
  practicalSkills     PracticalSkill[]

  @@index([isActive, deletedAt])           // Active assessments filtering
  @@index([createdAt])                     // Temporal assessment queries
  @@index([version])                       // Version-based queries
  @@index([dataRetentionDate])             // HIPAA retention compliance
  // @@fulltext([name, description])          // Full-text search on assessment details (requires MySQL)
  @@map("assessments")
}

model KnowledgeQuestion {
  id                 String              @id @default(cuid())
  assessmentId       String              @map("assessment_id")
  question           String              @db.Text
  modelAnswer        String              @map("model_answer") @db.Text
  order              Int
  weight             Int?                @default(1)
  difficulty         Int?                @default(1)
  tags               Json?
  assessment         Assessment          @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  knowledgeResponses KnowledgeResponse[]

  @@index([assessmentId, order])          // Question ordering
  @@index([difficulty])                    // Difficulty filtering
  @@map("knowledge_questions")
}

model PracticalSkill {
  id                 String              @id @default(cuid())
  assessmentId       String              @map("assessment_id")
  skillDescription   String              @map("skill_description") @db.Text
  canBeNotApplicable Boolean             @default(false) @map("can_be_not_applicable")
  order              Int
  weight             Int?                @default(1)
  difficulty         Int?                @default(1)
  category           String?             @db.VarChar(100)
  practicalResponses PracticalResponse[]
  assessment         Assessment          @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@index([assessmentId, order])          // Skill ordering
  @@index([category])                      // Category filtering
  @@index([difficulty])                    // Difficulty filtering
  @@map("practical_skills")
}

model EmergencyQuestion {
  id                 String              @id @default(cuid())
  assessmentId       String              @map("assessment_id")
  question           String              @db.Text
  modelAnswer        String              @map("model_answer") @db.Text
  order              Int
  weight             Int?                @default(1)
  severity           String?             @db.VarChar(50)
  assessment         Assessment          @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  emergencyResponses EmergencyResponse[]

  @@index([assessmentId, order])          // Question ordering
  @@index([severity])                      // Severity filtering
  @@map("emergency_questions")
}

model AssessmentTaskCoverage {
  id           String     @id @default(cuid())
  assessmentId String     @map("assessment_id")
  taskId       String     @map("task_id")
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  task         Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([assessmentId, taskId])
  @@map("assessment_task_coverage")
}

model AssessmentResponse {
  id                 String              @id @default(cuid())
  assessmentId       String              @map("assessment_id")
  carerId            String              @map("carer_id")
  assessorId         String              @map("assessor_id")
  assessorName       String              @map("assessor_name") @db.VarChar(255)
  assessorUniqueId   String              @map("assessor_unique_id") @db.VarChar(100)
  completedAt        DateTime            @default(now()) @map("completed_at")
  overallRating      CompetencyLevel     @map("overall_rating")
  // Healthcare compliance fields
  dataRetentionDate  DateTime?           @map("data_retention_date")
  encryptedData      String?             @map("encrypted_data") @db.Text
  isArchived         Boolean             @default(false) @map("is_archived")
  totalScore         Int?
  maxScore           Int?
  assessment         Assessment          @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  assessor           AdminUser           @relation(fields: [assessorId], references: [id], onDelete: Cascade)
  carer              Carer               @relation(fields: [carerId], references: [id], onDelete: Cascade)
  competencyRatings  CompetencyRating[]
  emergencyResponses EmergencyResponse[]
  knowledgeResponses KnowledgeResponse[]
  practicalResponses PracticalResponse[]

  @@index([carerId, completedAt])          // Carer assessment history
  @@index([assessorId, completedAt])       // Assessor activity tracking
  @@index([completedAt])                   // Temporal queries
  @@index([overallRating])                 // Rating distribution queries
  @@index([dataRetentionDate])             // HIPAA retention compliance
  @@index([assessmentId, carerId])         // Specific assessment queries
  @@map("assessment_responses")
}

model DraftAssessmentResponse {
  id                   String      @id @default(cuid())
  assessmentId         String      @map("assessment_id")
  carerId              String      @map("carer_id")
  createdByAdminId     String      @map("created_by_admin_id")
  draftData            Json        @map("draft_data") // Stores the entire form data as JSON
  lastSaved            DateTime    @updatedAt @map("last_saved")
  createdAt            DateTime    @default(now()) @map("created_at")
  syncedToServer       Boolean     @default(false) @map("synced_to_server")
  version              Int         @default(1)
  isEncrypted          Boolean     @default(false) @map("is_encrypted")
  
  assessment           Assessment  @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  carer                Carer       @relation(fields: [carerId], references: [id], onDelete: Cascade)
  createdByAdmin       AdminUser   @relation(fields: [createdByAdminId], references: [id], onDelete: Cascade)

  @@unique([assessmentId, carerId])
  @@index([createdByAdminId])              // Admin draft tracking
  @@index([lastSaved])                     // Recent drafts
  @@index([syncedToServer])                // Sync status tracking
  @@map("draft_assessment_responses")
}

model KnowledgeResponse {
  id          String             @id @default(cuid())
  responseId  String             @map("response_id")
  questionId  String             @map("question_id")
  carerAnswer String             @map("carer_answer")
  question    KnowledgeQuestion  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  response    AssessmentResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@map("knowledge_responses")
}

model PracticalResponse {
  id         String             @id @default(cuid())
  responseId String             @map("response_id")
  skillId    String             @map("skill_id")
  rating     PracticalRating
  response   AssessmentResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  skill      PracticalSkill     @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@map("practical_responses")
}

model EmergencyResponse {
  id          String             @id @default(cuid())
  responseId  String             @map("response_id")
  questionId  String             @map("question_id")
  carerAnswer String             @map("carer_answer")
  question    EmergencyQuestion  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  response    AssessmentResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@map("emergency_responses")
}

model TaskProgress {
  id                   String      @id @default(cuid())
  carerId              String      @map("carer_id")
  packageId            String      @map("package_id")
  taskId               String      @map("task_id")
  completionCount      Int         @default(0) @map("completion_count")
  completionPercentage Int         @default(0) @map("completion_percentage")
  lastUpdated          DateTime    @updatedAt @map("last_updated")
  createdAt            DateTime    @default(now()) @map("created_at")
  isActive             Boolean     @default(true) @map("is_active")
  notes                String?     @db.Text
  qualityScore         Int?
  timeSpent            Int?        // in minutes
  carer                Carer       @relation(fields: [carerId], references: [id], onDelete: Cascade)
  package              CarePackage @relation(fields: [packageId], references: [id], onDelete: Cascade)
  task                 Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([carerId, packageId, taskId])
  @@index([carerId])                   // Carer progress queries
  @@index([packageId])                 // Package progress queries
  @@index([completionPercentage])      // Progress filtering queries
  @@index([lastUpdated])               // Recent progress queries
  @@index([qualityScore])              // Quality tracking
  @@index([isActive])                  // Active progress tracking
  @@index([createdAt])                 // Progress creation date
  @@index([carerId, completionPercentage]) // Carer performance analysis
  @@map("task_progress")
}

model CompetencyRating {
  id                   String              @id @default(cuid())
  carerId              String              @map("carer_id")
  taskId               String              @map("task_id")
  level                CompetencyLevel
  source               CompetencySource
  assessmentResponseId String?             @map("assessment_response_id")
  setByAdminId         String?             @map("set_by_admin_id")
  setByAdminName       String?             @map("set_by_admin_name") @db.VarChar(255)
  setAt                DateTime            @default(now()) @map("set_at")
  notes                String?             @db.Text
  // Healthcare compliance fields
  expiresAt            DateTime?           @map("expires_at")
  isActive             Boolean             @default(true) @map("is_active")
  validatedBy          String?             @map("validated_by")
  validationDate       DateTime?           @map("validation_date")
  confidence           Int?                @default(100)
  // Carer confirmation fields
  confirmedAt          DateTime?           @map("confirmed_at")
  confirmedByCarerId   String?             @map("confirmed_by_carer_id")
  confirmationMethod   String?             @default("PENDING") @map("confirmation_method") @db.VarChar(50)
  notificationSentAt   DateTime?           @map("notification_sent_at")
  assessmentResponse   AssessmentResponse? @relation(fields: [assessmentResponseId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  carer                Carer               @relation(fields: [carerId], references: [id], onDelete: Cascade)
  setByAdmin           AdminUser?          @relation(fields: [setByAdminId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  task                 Task                @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([carerId, taskId])
  @@index([carerId])                       // Carer competency queries
  @@index([taskId])                        // Task-specific competency queries
  @@index([level])                         // Competency level filtering
  @@index([source])                        // Source-based queries (MANUAL vs ASSESSMENT)
  @@index([setAt])                         // Recent competency updates
  @@index([expiresAt])                     // Expiration tracking
  @@index([isActive])                      // Active competency filtering
  @@index([validationDate])                // Validation tracking
  @@index([confirmedAt])                   // Confirmation tracking
  @@index([confirmationMethod])            // Confirmation status filtering
  @@index([notificationSentAt])            // Notification tracking
  @@index([carerId, level])                // Carer competency analysis
  @@index([taskId, level])                 // Task competency distribution
  @@map("competency_ratings")
}

model Shift {
  id                   String             @id @default(cuid())
  packageId            String             @map("package_id")
  date                 DateTime           // Date of the shift
  startTime            String             @map("start_time") @db.VarChar(5) // HH:MM format
  endTime              String             @map("end_time") @db.VarChar(5)   // HH:MM format
  requiredCompetencies String[]           @map("required_competencies")
  isCompetentOnly      Boolean            @default(false) @map("is_competent_only")
  status               ShiftStatus        @default(PENDING)
  selectedCarerId      String?            @map("selected_carer_id")
  expiresAt            DateTime?          @map("expires_at")
  createdAt            DateTime           @default(now()) @map("created_at")
  createdByAdminId     String             @map("created_by_admin_id")
  rotaEntryId          String?            @map("rota_entry_id") // Links to created rota entry
  // Healthcare specific fields
  priority             Int?               @default(1)
  notes                String?            @db.Text
  duration             Int?               // Duration in minutes
  breakDuration        Int?               @map("break_duration") // Break duration in minutes
  overtimeAllowed      Boolean            @default(false) @map("overtime_allowed")
  
  // Relationships
  applications         ShiftApplication[]
  assignments          ShiftAssignment[]
  createdBy            AdminUser          @relation(fields: [createdByAdminId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  package              CarePackage        @relation(fields: [packageId], references: [id], onDelete: Cascade)
  selectedCarer        Carer?             @relation("SelectedCarer", fields: [selectedCarerId], references: [id])

  @@index([packageId, date])              // Package schedule queries
  @@index([selectedCarerId])               // Carer shift queries
  @@index([status])                        // Status filtering
  @@index([date, status])                  // Daily shift status
  @@index([expiresAt])                     // Expiration tracking
  @@index([createdByAdminId])              // Admin activity tracking
  @@index([priority])                      // Priority-based queries
  @@index([date, startTime])               // Chronological ordering
  @@map("shifts")
}

model ShiftApplication {
  id         String                 @id @default(cuid())
  shiftId    String                 @map("shift_id")
  carerId    String                 @map("carer_id")
  appliedAt  DateTime               @default(now()) @map("applied_at")
  status     ShiftApplicationStatus @default(PENDING)
  notes      String?                @db.Text // Optional notes from carer
  // Application tracking fields
  processedAt DateTime?             @map("processed_at")
  processedBy String?               @map("processed_by")
  priority    Int?                  @default(1)
  availability Json?                // Availability details
  
  // Relationships
  carer      Carer                  @relation(fields: [carerId], references: [id], onDelete: Cascade)
  shift      Shift                  @relation(fields: [shiftId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  
  @@unique([shiftId, carerId]) // Prevent duplicate applications
  @@index([carerId, appliedAt])            // Carer application history
  @@index([status])                        // Status filtering
  @@index([processedBy])                   // Admin processing tracking
  @@index([priority])                      // Priority-based queries
  @@index([shiftId, status])               // Shift application status
  @@map("shift_applications")
}

model ShiftAssignment {
  id          String      @id @default(cuid())
  shiftId     String      @map("shift_id")
  carerId     String      @map("carer_id")
  assignedAt  DateTime    @default(now()) @map("assigned_at")
  confirmedAt DateTime?   @map("confirmed_at")
  status      ShiftStatus @default(PENDING)
  // Assignment tracking fields
  assignedBy  String?     @map("assigned_by")
  cancelledAt DateTime?   @map("cancelled_at")
  cancelledBy String?     @map("cancelled_by")
  cancellationReason String? @map("cancellation_reason") @db.Text
  actualStartTime DateTime? @map("actual_start_time")
  actualEndTime DateTime?   @map("actual_end_time")
  hoursWorked Int?        @map("hours_worked")
  carer       Carer       @relation(fields: [carerId], references: [id], onDelete: Cascade)
  shift       Shift       @relation(fields: [shiftId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([carerId, assignedAt])           // Carer assignment history
  @@index([status])                        // Status filtering
  @@index([confirmedAt])                   // Confirmation tracking
  @@index([assignedBy])                    // Admin assignment tracking
  @@index([actualStartTime])               // Actual work time tracking
  @@map("shift_assignments")
}

model RotaEntry {
  id               String      @id @default(cuid())
  packageId        String      @map("package_id")
  carerId          String      @map("carer_id")
  date             DateTime
  shiftType        ShiftType   @map("shift_type")
  startTime        String      @map("start_time") @db.VarChar(5)
  endTime          String      @map("end_time") @db.VarChar(5)
  isConfirmed      Boolean     @default(false) @map("is_confirmed")
  createdAt        DateTime    @default(now()) @map("created_at")
  createdByAdminId String      @map("created_by_admin_id")
  // Enhanced fields
  updatedAt        DateTime    @updatedAt @map("updated_at")
  notes            String?     @db.Text
  isActive         Boolean     @default(true) @map("is_active")
  confirmedAt      DateTime?   @map("confirmed_at")
  confirmedBy      String?     @map("confirmed_by")
  priority         Int?        @default(1)
  overtimeHours    Int?        @map("overtime_hours") @default(0)
  carer            Carer       @relation(fields: [carerId], references: [id], onDelete: Cascade)
  createdBy        AdminUser   @relation(fields: [createdByAdminId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  package          CarePackage @relation(fields: [packageId], references: [id], onDelete: Cascade)

  // Performance indexes for common query patterns
  @@index([packageId, date])           // Weekly schedule queries
  @@index([carerId, date])             // Carer schedule queries
  @@index([date, shiftType])           // Date-based shift queries
  @@index([packageId, carerId, date])  // Specific assignment queries
  @@index([isConfirmed])               // Confirmation status queries
  @@index([createdAt])                 // Temporal queries
  @@index([isActive])                  // Active entry filtering
  @@index([priority])                  // Priority-based queries
  @@index([confirmedBy])               // Confirmation tracking
  @@index([updatedAt])                 // Recent updates tracking
  @@index([date, isActive, isConfirmed]) // Compound query optimization
  @@map("rota_entries")
}

model AuditLog {
  id                   String    @id @default(cuid())
  action               String    @db.VarChar(100)
  entityType           String    @map("entity_type") @db.VarChar(100)
  entityId             String    @map("entity_id")
  oldValues            Json?     @map("old_values")
  newValues            Json?     @map("new_values")
  performedByAdminId   String    @map("performed_by_admin_id")
  performedByAdminName String    @map("performed_by_admin_name") @db.VarChar(255)
  performedAt          DateTime  @default(now()) @map("performed_at")
  ipAddress            String?   @map("ip_address") @db.VarChar(45)
  userAgent            String?   @map("user_agent") @db.Text
  // Enhanced audit fields
  severity             String?   @db.VarChar(20) @default("INFO")
  category             String?   @db.VarChar(50)
  outcome              String?   @db.VarChar(20) @default("SUCCESS")
  duration             Int?      // Operation duration in milliseconds
  sessionId            String?   @map("session_id") @db.VarChar(100)
  correlationId        String?   @map("correlation_id") @db.VarChar(100)
  complianceFlags      Json?     @map("compliance_flags")
  performedBy          AdminUser @relation(fields: [performedByAdminId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([performedAt])                   // Temporal audit queries (most common)
  @@index([entityType, entityId])         // Entity-specific audit history
  @@index([performedByAdminId])           // Admin-specific audit history
  @@index([action])                       // Action-based filtering
  @@index([severity])                     // Severity filtering
  @@index([category])                     // Category-based queries
  @@index([outcome])                      // Success/failure tracking
  @@index([sessionId])                    // Session-based tracking
  @@index([correlationId])                // Correlation tracking
  @@index([performedAt, severity])        // Temporal + severity analysis
  @@index([entityType, action])           // Entity action analysis
  @@map("audit_logs")
}

enum CompetencyLevel {
  NOT_ASSESSED
  NOT_COMPETENT
  ADVANCED_BEGINNER
  COMPETENT
  PROFICIENT
  EXPERT
}

enum CompetencySource {
  ASSESSMENT
  MANUAL
}

enum PracticalRating {
  COMPETENT
  NEEDS_SUPPORT
  NOT_APPLICABLE
}

enum ShiftStatus {
  PENDING              // Shift created, sent to carers
  WAITING_RESPONSES    // Sent to carers, waiting for applications
  HAS_APPLICATIONS     // At least one carer has applied
  ASSIGNED             // Admin has selected a carer
  CONFIRMED            // Selected carer confirmed
  CANCELLED            // Shift cancelled
  COMPLETED            // Shift completed
  EXPIRED              // No applications received, expired
}

enum ShiftApplicationStatus {
  PENDING
  SELECTED
  REJECTED
}

enum ShiftType {
  DAY
  NIGHT
}

enum InvitationType {
  ADMIN
  CARER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

// Security and Audit Enhancements
model SecurityEvent {
  id          String   @id @default(uuid())
  type        SecurityEventType
  severity    AlertSeverity
  userId      String?
  userName    String?
  ipAddress   String?
  userAgent   String?
  details     Json
  metadata    Json?
  createdAt   DateTime @default(now())

  @@map("security_events")
}

model AuditAlert {
  id              String        @id @default(uuid())
  type            AlertType
  severity        AlertSeverity
  title           String
  message         String
  details         Json
  acknowledged    Boolean       @default(false)
  acknowledgedBy  String?
  acknowledgedAt  DateTime?
  createdAt       DateTime      @default(now())

  @@map("audit_alerts")
}

enum SecurityEventType {
  FAILED_LOGIN
  PERMISSION_VIOLATION
  SUSPICIOUS_ACTIVITY
  DATA_BREACH
  CONCURRENT_SESSION
  IP_ANOMALY
}

enum AlertType {
  SECURITY
  COMPLIANCE
  SYSTEM
  DATA_INTEGRITY
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
